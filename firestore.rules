/**
 * @fileOverview Firestore Security Rules for MindPilot application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-generated content
 * and allows public read access to curated content. All user-specific data is
 * stored under the /users/{userId} path and accessible only by the authenticated user.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/ai_notes/{aiNoteId}: Stores AI-generated notes for each user.
 * - /users/{userId}/flashcards/{flashcardId}: Stores flashcards created by each user.
 * - /users/{userId}/pomodoro_sessions/{pomodoroSessionId}: Stores Pomodoro session data.
 * - /focus_music/{focusMusicId}: Stores focus music tracks available to all users.
 * - /users/{userId}/progress_tracking/{progressTrackingId}: Stores user's progress data.
 * - /users/{userId}/notes/{noteId}: Stores user's notes.
 * - /study_tips/{studyTipId}: Stores study tips available to all users.
 *
 * Key Security Decisions:
 * - User data is strictly segregated and accessible only by the owning user.
 * - Public read access is granted for study tips and focus music.
 * - No user listing is allowed.
 * - Data validation is minimized for rapid prototyping, focusing on ownership.
 *
 * Denormalization for Authorization:
 * - User-specific data includes a userId field to quickly verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles, accessible only by the user.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile if request.auth.uid == 'user123'.
     * @allow (get, update, delete) - User with UID 'user123' can read/modify their profile.
     * @deny (create) - User with UID 'user456' cannot create a profile with ID 'user123'.
     * @deny (update, delete) - User with UID 'user456' cannot modify profile 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secure AI-generated notes, accessible only by the user.
     * @path /users/{userId}/ai_notes/{aiNoteId}
     * @allow (create) - User with UID 'user123' can create an AI note under their profile.
     * @allow (get, update, delete) - User with UID 'user123' can read/modify their AI notes.
     * @deny (create) - User with UID 'user456' cannot create an AI note under user 'user123'.
     * @deny (update, delete) - User with UID 'user456' cannot modify AI notes under user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/ai_notes/{aiNoteId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secure flashcards, accessible only by the user.
     * @path /users/{userId}/flashcards/{flashcardId}
     * @allow (create) - User with UID 'user123' can create a flashcard under their profile.
     * @allow (get, update, delete) - User with UID 'user123' can read/modify their flashcards.
     * @deny (create) - User with UID 'user456' cannot create a flashcard under user 'user123'.
     * @deny (update, delete) - User with UID 'user456' cannot modify flashcards under user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/flashcards/{flashcardId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secure Pomodoro sessions, accessible only by the user.
     * @path /users/{userId}/pomodoro_sessions/{pomodoroSessionId}
     * @allow (create) - User with UID 'user123' can create a pomodoro session under their profile.
     * @allow (get, update, delete) - User with UID 'user123' can read/modify their pomodoro sessions.
     * @deny (create) - User with UID 'user456' cannot create a pomodoro session under user 'user123'.
     * @deny (update, delete) - User with UID 'user456' cannot modify pomodoro sessions under user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/pomodoro_sessions/{pomodoroSessionId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Focus music tracks, publicly accessible.
     * @path /focus_music/{focusMusicId}
     * @allow (get, list) - Any user, signed in or not, can retrieve focus music tracks.
     * @deny (create, update, delete) - No user should be able to create, update, or delete music tracks without specific admin privileges (not defined).
     * @principle Allows public read access while restricting writes.
     */
    match /focus_music/{focusMusicId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role check here
      allow update: if false; // TODO: Add admin role check here
      allow delete: if false; // TODO: Add admin role check here
    }

    /**
     * @description Secure progress tracking data, accessible only by the user.
     * @path /users/{userId}/progress_tracking/{progressTrackingId}
     * @allow (create) - User with UID 'user123' can create progress tracking data under their profile.
     * @allow (get, update, delete) - User with UID 'user123' can read/modify their progress tracking data.
     * @deny (create) - User with UID 'user456' cannot create progress tracking data under user 'user123'.
     * @deny (update, delete) - User with UID 'user456' cannot modify progress tracking data under user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/progress_tracking/{progressTrackingId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secure notes, accessible only by the user.
     * @path /users/{userId}/notes/{noteId}
     * @allow (create) - User with UID 'user123' can create a note under their profile.
     * @allow (get, update, delete) - User with UID 'user123' can read/modify their notes.
     * @deny (create) - User with UID 'user456' cannot create a note under user 'user123'.
     * @deny (update, delete) - User with UID 'user456' cannot modify notes under user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/notes/{noteId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Study tips, publicly accessible.
     * @path /study_tips/{studyTipId}
     * @allow (get, list) - Any user, signed in or not, can retrieve study tips.
     * @deny (create, update, delete) - No user should be able to create, update, or delete study tips without specific admin privileges (not defined).
     * @principle Allows public read access while restricting writes.
     */
    match /study_tips/{studyTipId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role check here
      allow update: if false; // TODO: Add admin role check here
      allow delete: if false; // TODO: Add admin role check here
    }
  }
}