/**
 * @fileoverview Firestore Security Rules for the MindPilot application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-generated content
 * and provides public read access to a curated set of study tips and focus music.
 *
 * Data Structure:
 * All user-specific data (profiles, notes, flashcards, pomodoro sessions, progress tracking)
 * is nested under the `/users/{userId}` path.
 * Public data (study tips, focus music) resides in top-level collections.
 *
 * Key Security Decisions:
 * - User-specific data is only accessible by the owning user (enforced through path-based ownership).
 * - Public data (study tips, focus music) is readable by all users, but only modifiable through admin roles (unimplemented).
 * - List operations are allowed for owners of user-specific collections.
 * - No validation is performed on data types or required fields during write operations (prototyping mode).
 *
 * Denormalization for Authorization:
 * The `userId` is used in subcollection documents to establish an ownership relationship. This avoids
 * costly `get()` operations in security rules.
 *
 * Structural Segregation:
 * Public data (study tips and focus music) is stored in separate, top-level collections
 * to enable efficient public reads without compromising the security of user-specific data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profile data. Only the user can read and write their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     * @allow (get) User with ID 'user123' can read their profile.
     * @deny (get) User with ID 'user456' cannot read the profile of 'user123'.
     * @allow (update) User with ID 'user123' can update their profile.
     * @deny (update) User with ID 'user456' cannot update the profile of 'user123'.
     * @allow (delete) User with ID 'user123' can delete their profile.
     * @deny (delete) User with ID 'user456' cannot delete the profile of 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure AI-generated notes for a specific user. Only the user can manage their own notes.
     * @path /users/{userId}/ai_notes/{aiNoteId}
     * @allow (create) User with ID 'user123' can create an AI note.
     * @deny (create) User with ID 'user456' cannot create an AI note for 'user123'.
     * @allow (get) User with ID 'user123' can read their AI note.
     * @deny (get) User with ID 'user456' cannot read the AI note of 'user123'.
     * @allow (update) User with ID 'user123' can update their AI note.
     * @deny (update) User with ID 'user456' cannot update the AI note of 'user123'.
     * @allow (delete) User with ID 'user123' can delete their AI note.
     * @deny (delete) User with ID 'user456' cannot delete the AI note of 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/ai_notes/{aiNoteId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure flashcards created by a specific user. Only the user can manage their own flashcards.
     * @path /users/{userId}/flashcards/{flashcardId}
     * @allow (create) User with ID 'user123' can create a flashcard.
     * @deny (create) User with ID 'user456' cannot create a flashcard for 'user123'.
     * @allow (get) User with ID 'user123' can read their flashcard.
     * @deny (get) User with ID 'user456' cannot read the flashcard of 'user123'.
     * @allow (update) User with ID 'user123' can update their flashcard.
     * @deny (update) User with ID 'user456' cannot update the flashcard of 'user123'.
     * @allow (delete) User with ID 'user123' can delete their flashcard.
     * @deny (delete) User with ID 'user456' cannot delete the flashcard of 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/flashcards/{flashcardId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure Pomodoro session data for a specific user. Only the user can manage their own sessions.
     * @path /users/{userId}/pomodoro_sessions/{pomodoroSessionId}
     * @allow (create) User with ID 'user123' can create a Pomodoro session.
     * @deny (create) User with ID 'user456' cannot create a Pomodoro session for 'user123'.
     * @allow (get) User with ID 'user123' can read their Pomodoro session.
     * @deny (get) User with ID 'user456' cannot read the Pomodoro session of 'user123'.
     * @allow (update) User with ID 'user123' can update their Pomodoro session.
     * @deny (update) User with ID 'user456' cannot update the Pomodoro session of 'user123'.
     * @allow (delete) User with ID 'user123' can delete their Pomodoro session.
     * @deny (delete) User with ID 'user456' cannot delete the Pomodoro session of 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/pomodoro_sessions/{pomodoroSessionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allow public read access to focus music tracks. Write access should be restricted to admins (unimplemented).
     * @path /focus_music/{focusMusicId}
     * @allow (get) Any user can read a focus music track.
     * @deny (create) Any non-admin user cannot create a focus music track.
     * @principle Allows public reads while restricting writes.
     */
    match /focus_music/{focusMusicId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Implement admin-only access.
      allow update: if false; // TODO: Implement admin-only access.
      allow delete: if false; // TODO: Implement admin-only access.
    }

    /**
     * @description Secure progress tracking data for a specific user. Only the user can manage their own progress data.
     * @path /users/{userId}/progress_tracking/{progressTrackingId}
     * @allow (create) User with ID 'user123' can create progress tracking data.
     * @deny (create) User with ID 'user456' cannot create progress tracking data for 'user123'.
     * @allow (get) User with ID 'user123' can read their progress tracking data.
     * @deny (get) User with ID 'user456' cannot read the progress tracking data of 'user123'.
     * @allow (update) User with ID 'user123' can update their progress tracking data.
     * @deny (update) User with ID 'user456' cannot update the progress tracking data of 'user123'.
     * @allow (delete) User with ID 'user123' can delete their progress tracking data.
     * @deny (delete) User with ID 'user456' cannot delete the progress tracking data of 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/progress_tracking/{progressTrackingId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure notes taken by a specific user. Only the user can manage their own notes.
     * @path /users/{userId}/notes/{noteId}
     * @allow (create) User with ID 'user123' can create a note.
     * @deny (create) User with ID 'user456' cannot create a note for 'user123'.
     * @allow (get) User with ID 'user123' can read their note.
     * @deny (get) User with ID 'user456' cannot read the note of 'user123'.
     * @allow (update) User with ID 'user123' can update their note.
     * @deny (update) User with ID 'user456' cannot update the note of 'user123'.
     * @allow (delete) User with ID 'user123' can delete their note.
     * @deny (delete) User with ID 'user456' cannot delete the note of 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/notes/{noteId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allow public read access to study tips. Write access should be restricted to admins (unimplemented).
     * @path /study_tips/{studyTipId}
     * @allow (get) Any user can read a study tip.
     * @deny (create) Any non-admin user cannot create a study tip.
     * @principle Allows public reads while restricting writes.
     */
    match /study_tips/{studyTipId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Implement admin-only access.
      allow update: if false; // TODO: Implement admin-only access.
      allow delete: if false; // TODO: Implement admin-only access.
    }

    // --- Helper functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the document, based on the userId.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the owner of an existing document.
     * @param {string} userId The user ID to compare against the request's authentication UID and the resource's userId.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}